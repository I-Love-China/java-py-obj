package com.github.typist.lexer;

/**
 * 词法分析中的记号类型枚举
 * 
 * 在编译原理中，词法分析器将输入的字符流分解为记号（Token）序列。
 * 每个记号都有一个类型和对应的值。这个枚举定义了所有可能的记号类型。
 * 
 * 支持的 Python 对象语法：
 * - 基本类型：数字、字符串、布尔值、None
 * - 容器类型：列表[]、字典{}、元组()、集合{}
 * - 分隔符：逗号、冒号、各种括号
 * 
 * 词法分析流程：
 * 输入字符串 → 词法分析器 → 记号序列 → 语法分析器
 * 
 * @author typist
 * @version 1.1
 */
public enum TokenType {

    // ========================= 字面量类型 =========================

    /**
     * 数字类型记号（整数或浮点数）
     * 示例：42, 3.14, -10, 0.5
     * 对应的词素（lexeme）会被解析为具体的数值
     */
    NUMBER,

    /**
     * 字符串类型记号
     * 示例：'hello', "world", 'Python字符串'
     * 支持单引号和双引号，包含转义字符处理
     */
    STRING,

    /**
     * 布尔类型记号
     * 示例：True, False
     * Python中的布尔值首字母大写，与Java不同
     */
    BOOLEAN,

    /**
     * 空值类型记号
     * 示例：None
     * Python中的空值，对应Java中的null
     */
    NULL,

    // ========================= 标识符类型 =========================

    /**
     * 标识符类型记号（目前未使用）
     * 用于识别变量名、函数名等标识符
     * 保留用于未来扩展功能
     */
    IDENTIFIER,

    // ========================= 分隔符类型 =========================

    /**
     * 左方括号 '['
     * 用于标识列表（list）和数组的开始
     * 示例：[1, 2, 3] 中的开始符号
     */
    LEFT_BRACKET,

    /**
     * 右方括号 ']'
     * 用于标识列表（list）和数组的结束
     * 示例：[1, 2, 3] 中的结束符号
     */
    RIGHT_BRACKET,

    /**
     * 左花括号 '{'
     * 用于标识字典（dict）或集合（set）的开始
     * 根据后续内容判断具体类型：
     * - 如果包含冒号，则为字典：{'key': 'value'}
     * - 如果不包含冒号，则为集合：{1, 2, 3}
     */
    LEFT_BRACE,

    /**
     * 右花括号 '}'
     * 用于标识字典（dict）或集合（set）的结束
     */
    RIGHT_BRACE,

    /**
     * 左圆括号 '('
     * 用于标识元组（tuple）的开始
     * 示例：(1, 2, 3) 中的开始符号
     * 注意：空元组 () 和单元素元组 (1,) 的特殊处理
     */
    LEFT_PAREN,

    /**
     * 右圆括号 ')'
     * 用于标识元组（tuple）的结束
     */
    RIGHT_PAREN,

    /**
     * 逗号 ','
     * 用于分隔容器类型中的元素
     * 示例：
     * - 列表：[1, 2, 3]
     * - 字典：{'a': 1, 'b': 2}
     * - 元组：(1, 2, 3)
     */
    COMMA,

    /**
     * 冒号 ':'
     * 用于字典中分隔键和值
     * 示例：{'name': 'John', 'age': 30}
     * 这是区分字典和集合的关键标识符
     */
    COLON,

    // ========================= 特殊类型 =========================

    /**
     * 文件结束标记
     * 表示输入流已经结束，用于语法分析器判断解析完成
     * 这是编译原理中常用的哨兵值（sentinel value）
     */
    EOF
}